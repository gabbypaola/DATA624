aus_production %>% autoplot(Gas)+
labs(title="Austrailian Gas Production")
fit <- aus_production %>%
model(
Multiplicative = ETS(Gas ~ error("M") + trend("A") +
season("M"))
)
fc <- fit %>% forecast(h = "3 years")
fc %>%
autoplot(aus_production, level = NULL) +
labs(title="Australian Gas Production") +
guides(colour = guide_legend(title = "Forecast"))
fit <- aus_production %>%
model(
# Multiplicative
Multiplicative = ETS(Gas ~ error("M") + trend("A") + season("M")),
`Multiplicative, Damped` = ETS(Gas ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>% forecast(h = "3 years")
fc %>%
autoplot(aus_production, level = NULL) +
labs(title="Australian Gas Production") +
guides(colour = guide_legend(title = "Forecast"))
fit <- aus_production %>%
model(
# Multiplicative
Multiplicative = ETS(Gas ~ error("M") + trend("A") + season("M")),
# Damped multiplicative
`Multiplicative, Damped` = ETS(Gas ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>% forecast(h = 5)
fc %>%
autoplot(aus_production, level = NULL) +
labs(title="Australian Gas Production") +
guides(colour = guide_legend(title = "Forecast"))
fit <- aus_production %>%
model(
# Multiplicative
Multiplicative = ETS(Gas ~ error("M") + trend("A") + season("M")),
# Damped multiplicative
`Multiplicative, Damped` = ETS(Gas ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>% forecast(h = "5 years")
fc %>%
autoplot(aus_production, level = NULL) +
labs(title="Australian Gas Production") +
guides(colour = guide_legend(title = "Forecast"))
report(fit)
report(fit)
report(fit)$AIC
report(fit)$AIC[1]
report(fit)$AIC[1] - report(fit)$AIC[2]
report(fit)
set.seed(555)
myseries <- aus_retail %>%
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
myseries
fit <- myseries %>%
model(
Multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M")),
`Multiplicative, Damped` = ETS(Trips ~ error("M") + trend("Ad") +
season("M")),
)
fit <- myseries %>%
model(
Multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M")),
`Multiplicative, Damped` = ETS(Trips ~ error("M") + trend("Ad") +
season("M"))
)
fit <- myseries %>%
model(
Multiplicative = ETS(Turnover ~ error("M") + trend("A") +
season("M")),
`Multiplicative, Damped` = ETS(Turnover ~ error("M") + trend("Ad") +
season("M"))
)
fc <- fit %>% forecast(h = "5 years")
fc %>%
autoplot(myseries, level = NULL) +
labs(title="Australian Department Stores",
y="Turnover") +
guides(colour = guide_legend(title = "Forecast"))
accuracy(fit)
fit$Multiplicative
accuracy(fit) %>%select(".model", "RMSE")
fit <- myseries %>%
model(
`Holt-Winters’ Multiplicative` = ETS(Turnover ~ error("M") + trend("A") +
season("M")),
`Holt-Winters’ Damped Multiplicative` = ETS(Turnover ~ error("M") + trend("Ad") +
season("M"))
)
fc <- fit %>% forecast(h = "5 years")
fc %>%
autoplot(myseries, level = NULL) +
labs(title="Australian Department Stores",
y="Turnover") +
guides(colour = guide_legend(title = "Forecast"))
accuracy(fit) %>%select(".model", "RMSE")
5.532134	-5.529967
accuracy(fit) %>%select(".model", "RMSE")
fit %>% select("Holt-Winters' Damped") %>% gg_tsresiduals()
fit %>% select("Holt-Winters' Damped Multiplicative") %>% gg_tsresiduals()
fit %>% select("Holt-Winters’ Damped Multiplicative") %>% gg_tsresiduals()
# Split the data we use
myseries_train <- myseries %>%
filter(year(Month) < 2011)
# Add seasonal naïve model to our fit model
fit <- myseries_train %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M")),
"Holt-Winters' Multiplicative" = ETS(Turnover ~ error("M") +
trend("A") +
season("M")),
"Seasonal Naïve Forecast" = SNAIVE(Turnover)
)
# Assign the data over 2011 to a variable as our forecast comparison later
Compare <- anti_join(myseries, myseries_train,
by = c("State", "Industry", "Series ID", "Month", "Turnover"))
# Do the forecasting according to comparison data
fc <- fit %>%
forecast(Compare)
# Call the Comparison plot
autoplot(Compare, Turnover) +
autolayer(fc, level = NULL) +
guides(colour=guide_legend(title="Forecast")) +
ggtitle('Comparison of Forecast')
# split
myseries_train <- myseries %>%
filter(year(Month) < 2011)
# seasonal naïve
fit <- myseries_train %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") + trend("Ad") +
season("M")),
"Holt-Winters' Multiplicative" = ETS(Turnover ~ error("M") + trend("A") +
season("M")),
"Seasonal Naïve Forecast" = SNAIVE(Turnover)
)
# Assign the data over 2011 to a variable as our forecast comparison later
Compare <- anti_join(myseries, myseries_train,
by = c("State", "Industry", "Series ID", "Month", "Turnover"))
# Do the forecasting according to comparison data
fc <- fit %>%
forecast(Compare)
# plot
autoplot(Compare, Turnover) +
autolayer(fc, level = NULL) +
guides(colour=guide_legend(title="Forecast")) +
ggtitle('Forecast Comparison',
subtitle= "Austrailian Department Stores")
# split
myseries_train <- myseries %>%
filter(year(Month) < 2011)
# seasonal naïve
fit <- myseries_train %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") + trend("Ad") +
season("M")),
"Holt-Winters' Multiplicative" = ETS(Turnover ~ error("M") + trend("A") +
season("M")),
"Seasonal Naïve Forecast" = SNAIVE(Turnover)
)
comparison <- anti_join(myseries, myseries_train,
by = c("State", "Industry", "Series ID", "Month", "Turnover"))
# Do the forecasting according to comparison data
fc <- fit %>%
forecast(comparison)
# plot
autoplot(comparison, Turnover) +
autolayer(fc, level = NULL) +
guides(colour=guide_legend(title="Forecast")) +
ggtitle('Forecast Comparison',
subtitle= "Austrailian Department Stores")
accuracy(fit)
report(fit)
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc)
)
# Our best previous model is multiplicative method
fit_best <-ts_bc %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(fit_best))
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc),
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(box_cox(Turnover, lambda) ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(box_cox(Turnover, lambda)),
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
accuracy(fit)
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(box_cox(Turnover, lambda) ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(box_cox(Turnover, lambda))
)
best_fit <-ts_bc %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(best_fit))
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc)
)
best_fit <-ts_bc %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(best_fit))
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
# Model use box-cox transformation
fit <- myseries_train %>%
model(
'STL (BoxCox)' = STL(box_cox(Turnover, lambda) ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(box_cox(Turnover, lambda))
)
best_fit <-myseries_train %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(best_fit))
rbind(accuracy(fit),accuracy(fit_best))
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc)
)
# Our best previous model is multiplicative method
fit_best <-ts_bc %>%
model(
"Holt-Winters' Multiplicative" = ETS(Turnover ~ error("M") +
trend("A") +
season("M"))
)
rbind(accuracy(fit),accuracy(fit_best))
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# Model use box-cox transformation
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc),
"Holt-Winters' Multiplicative" = ETS(Turnover ~ error("M") +
trend("A") +
season("M"))
)
#find optimal lambda
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
#bc transformed data
ts_bc <- myseries_train %>%
mutate(
bc = box_cox(Turnover, lambda)
)
# bc transform
fit <- ts_bc %>%
model(
'STL (BoxCox)' = STL(bc ~ season(window = "periodic"),
robust = T),
'ETS (BoxCox)' = ETS(bc)
)
# Our best previous model is multiplicative method
fit_best <-ts_bc %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") +
trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(fit_best))
#find optimal lambda
lambda <- myseries_train %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
#bc transformed data
ts_bc <- myseries_train %>%
mutate(
bc_turnover = box_cox(Turnover, lambda)
)
# bc transformed model
fit <- ts_bc %>%
model(
'Box-Cox STL' = STL(bc_turnover ~ season(window = "periodic"),
robust = T),
'Box-Cox ETS' = ETS(bc_turnover)
)
# best previous model
best_fit <-ts_bc %>%
model(
"Holt-Winters' Damped" = ETS(Turnover ~ error("M") + trend("Ad") +
season("M"))
)
rbind(accuracy(fit),accuracy(best_fit))
setwd("~/CUNY SPS/DATA_624/DATA624")
gafa_stock
library(fpp3)
gafa_stock
unique(gafa_stock$Symbol)
gafa_stock %>%
filter(Symbol == "AMZN")
gafa_stock %>%
filter(Symbol == "AMZN") %>%
autoplot(Close)
gafa_stock %>%
filter(Symbol == "AMZN") %>%
autoplot(Close) %>%
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
gafa_stock %>%
filter(Symbol == "AMZN") %>%
autoplot(Close) +
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
#filter for amazon
amzn <- gafa_stock %>%
filter(Symbol == "AMZN")
#plot the time series
amzn %>%
autoplot(Close) +
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
amzn %>%
ACF(Close) %>%
autoplot()
#filter for amazon
amzn <- gafa_stock %>%
filter(Symbol == "AMZN")
#plot the time series, acf, pacf
amzn %>%
gg_tsdisplay(Close, plot_type = 'partial') +
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
#plot the time series, acf, pacf
amzn %>%
gg_tsdisplay(differenced(Close), plot_type = 'partial') +
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
#plot the time series, acf, pacf
amzn %>%
gg_tsdisplay(difference(Close), plot_type = 'partial') +
labs(title= "Daily Closing Prices",
subtitle= "Ticker: AMZN")
#plot the time series, acf, pacf
amzn %>%
gg_tsdisplay(difference(Close), plot_type = 'partial') +
labs(title= "Differenced Daily Closing Prices",
subtitle= "Ticker: AMZN")
amzn %>%
mutate(diff_close = difference(Close)) %>%
features(diff_close, ljung_box, lag = 10)
amzn %>%
mutate(diff_close = difference(Close)) %>%
features(diff_close, ljung_box, lag = 30)
amzn %>%
mutate(diff_close = difference(Close)) %>%
features(diff_close, ljung_box, lag = 30)
global_economy
turkey <- global_economy %>%
filter(Country=='Turkey')
turkey
turkey %>%
gg_tsdisplay(Close, plot_type = 'partial') +
labs(title= "Turkish GDP")
turkey <- global_economy %>%
filter(Country=='Turkey')
turkey %>%
gg_tsdisplay(GDP, plot_type = 'partial') +
labs(title= "Turkish GDP")
turkey %>%
autoplot() +
labs(title= "Turkish GDP")
lambda <- turkey %>%
features(GDP, features = guerrero) %>%
pull(lambda_guerrero)
turkey %>%
autoplot(box_cox(GDP, lambda)) +
labs(y = "",
title = latex2exp::TeX(paste0(
"Transformed GDP with $\\lambda$ = ",
round(lambda,2))))
turkey %>%
mutate(box_cox_GDP = box_cox(GDP, lambda)) %>%
features(box_cox_GDP, unitroot_nsdiffs)
turkey %>%
features(GDP, unitroot_nsdiffs)
ndiffs(turkey$GDP)
library(fpp2)
ndiffs(turkey$GDP)
turkey <- global_economy %>%
filter(Country=='Turkey') %>%
select(Country, GDP)
turkey %>%
autoplot() +
labs(title= "Turkish GDP")
turkey  %>%
mutate(GDP = box_cox(GDP, lambda_gdp)) %>%
features(GDP, unitroot_ndiffs)
turkey  %>%
mutate(GDP = box_cox(GDP, lambda)) %>%
features(GDP, unitroot_ndiffs)
#turkey %>%
# features(GDP, unitroot_nsdiffs)
#library(fpp2)
#ndiffs(turkey$GDP)
aus_accommodation
tasmania <- aus_accommodation %>%
filter(State == 'Tasmania')  %>%
select(State, Takings)
lambda_tasmania <- tasmania %>%
features(Takings, features = guerrero) %>%
pull(lambda_guerrero)
tasmania %>%
mutate(Takings = box_cox(Takings, lambda_tasmania)) %>%
features(Takings, unitroot_ndiffs)
turkey <- global_economy %>%
filter(Country=='Turkey') %>%
select(Country, GDP)
souvenirs
#find lambda
lambda_souvenirs <- souvenirs %>%
features(Sales, features = guerrero) %>%
pull(lambda_guerrero)
#get ndiffs
souvenirs %>%
mutate(Sales = box_cox(Sales, lambda_souvenirs)) %>%
features(Sales, unitroot_ndiffs)
