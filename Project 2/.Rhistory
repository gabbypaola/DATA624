cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('steelblue','red'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('blue','orange'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('darkblue','orange'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('darkblue','yellow'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('#4682B4','#B47846'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('forestgreen','red'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, col=c('skyblue','red'), numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
VIM::aggr(train, numbers=T, sortVars=T,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= NA,
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'grey',
cex.axis = .7,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .9,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .5,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .3,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .9,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
missmap(train)
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of Data", "Combinations and Percentiles"))
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of NAs", "Combinations"))
#NA counts by column
#sapply(test, function(x) sum(is.na(x)))
VIM::aggr(test, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of NAs", "Combinations"))
print(dfSummary(train), file = '~/train_summary.html')
31-3
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Team')
library(ggplot2)
ggplot2::ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Team')
library(ggplot2)
install.packages(c("cli", "dplyr", "fansi", "igraph", "magrittr", "nloptr", "quantreg", "tibble", "vctrs"))
library(ggplot2)
install.packages(c("cli", "dplyr", "fansi", "igraph", "magrittr", "nloptr", "quantreg", "tibble", "vctrs"))
install.packages(c("cli", "dplyr", "fansi", "igraph", "magrittr", "nloptr", "quantreg", "tibble", "vctrs"))
library(readr)
library(DataExplorer)
library(summarytools)
library(Amelia)
library(VIM)
library(dplyr)
library(forecast)
library(tidyr)
library(mice)
library(corrplot)
library(MASS)
library(earth)
library(RANN)
#load data
train <- read.csv("TrainingData.csv")
#review
glimpse(train)
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of NAs", "Combinations"))
print(dfSummary(train), file = '~/train_summary.html')
library(ggplot2)
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Team')
DataExplorer::plot_histogram(train, nrow = 3L, ncol = 4L)
#load data
test <- read.csv("TestData.csv")
#review
glimpse(test)
#NA counts by column
#sapply(test, function(x) sum(is.na(x)))
VIM::aggr(test, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of NAs", "Combinations"))
print(dfSummary(test), file = '~/test_summary.html')
stats <- descr(train,
headings = FALSE, #remove headings
stats = "common",# most common descriptive statistics, default is all
transpose = TRUE #allows for better display due to large amount of variables
)
dfstats <- as.data.frame.matrix(stats)
dfstats$rightskew <- dfstats$Mean > dfstats$Median
dfstats$rightamount <- round(dfstats$Mean - dfstats$Median, 4)
dfstats$leftskew <- dfstats$Mean < dfstats$Median
dfstats$leftamount <- round(dfstats$Median- dfstats$Mean , 4)
summary(train)
DataExplorer::plot_histogram(train, nrow = 3L, ncol = 4L)
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Team')+
labs(title= 'Brand.Code Distribution')
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Brand.Code')+
labs(title= 'Brand.Code Distribution')
train$Brand.Code[train$Brand.Code == ""] <- "No Code"
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar(fill='steelblue') +  labs(x='Brand.Code')+
labs(title= 'Brand.Code Distribution')
train <- train %>%
dplyr::mutate(Brand.Code = factor(Brand.Code,
levels = c('No Code', 'A','B','C','D'),
ordered = FALSE))
str(train)
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar() +  labs(x='Brand.Code')+
labs(title= 'Brand.Code Distribution')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric)
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt', upper = "number", lower="circle")
numeric_values %>%
select_if(is.numeric)
numeric_values %>%
select_if(is.numeric) %>%
na.omit()
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric)
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt', upper = "number", lower="circle")
numeric_values %>%
select_if(is.numeric)
numeric_values %>%
select_if(is.numeric) %>%
na.omit()
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt', upper = "number", lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle",
number.cex=0.75)
corrplot(train_cor, addCoef.col = 1,    # Change font size of number-labels in color-legend
cl.cex = 0.5)
corrplot(train_cor, addCoef.col = 1,    # Change font size of number-labels in color-legend
number.cex = 0.5)
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle", addCoef.col = 'black'
)
#number.cex=0.5
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'n',
lower = "number", upper="circle", addCoef.col = 'black'
)
#number.cex=0.5
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle", upper.col="black")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle")
corrplot(train_cor, order = 'hclust', addrect = 2)
corrplot(train_cor, order = 'hclust', addrect = 2)
corrplot(train_cor, order = 'AOE', col = COL2('RdBu', 10))
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black', tl.pos = 'lt',
upper = "number", lower="circle",order = 'AOE')
train_cor <- cor(numeric_values)
corrplot.mixed(train_cor, tl.col = 'black',order = 'AOE')
corrplot.mixed(train_cor, order = 'AOE')
corrplot(train_cor, order = 'hclust', addrect = 2)
corrplot(train_cor, order = 'AOE', tl.col = 'black')
View(train_cor)
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
corrplot(train_cor, order = 'AOE', tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
corrplot(train_cor,tl.col = 'black')
findCorrelation(
train_cor,
cutoff = 0.9,
verbose = FALSE,
names = FALSE,
exact = ncol(train_cor) < 100
)
library(caret)
findCorrelation(
train_cor,
cutoff = 0.9,
verbose = FALSE,
names = FALSE,
exact = ncol(train_cor) < 100
)
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
corrplot(train_cor, order = 'AOE', tl.col = 'black')
train_cor < 0.90
train_cor <- cor(numeric_values) < 0.90
corrplot(train_cor, order = 'AOE', tl.col = 'black')
train_cor <- cor(numeric_values)
train_cor <- findCorrelation(cor(numeric_values), cutoff = 0.9)
corrplot(train_cor, order = 'AOE', tl.col = 'black')
train_cor <- findCorrelation(cor(numeric_values), cutoff = 0.9)
corrplot(train_cor, tl.col = 'black')
findCorrelation(cor(numeric_values), cutoff = 0.9)
coor_data <- findCorrelation(cor(numeric_values), cutoff = 0.9)
corr_data <- findCorrelation(cor(numeric_values), cutoff = 0.9)
numeric_values <- numeric_values[,-corr_data]
train_cor <- cor(numeric_values)
corrplot(train_cor, tl.col = 'black')
corr_data <- findCorrelation(cor(numeric_values), cutoff = 0.9)
numeric_values <- numeric_values[,-corr_data]
View(numeric_values)
corr_data <- findCorrelation(cor(numeric_values), cutoff = 0.8)
numeric_values <- numeric_values[,-corr_data]
corr_data <- findCorrelation(cor(numeric_values), cutoff = 0.8)
numeric_values <- numeric_values[,-corr_data]
train_cor <- cor(numeric_values)
corrplot(train_cor, tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
#corr_data <- findCorrelation(cor(numeric_values), cutoff = 0.8)
#numeric_values <- numeric_values[,-corr_data]
train_cor <- cor(numeric_values)
corrplot(train_cor, tl.col = 'black')
numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
findCorrelation(cor(numeric_values), cutoff = 0.9)
numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.9)])
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]), tl.col = 'black')
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.1)]), tl.col = 'black')
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.5)]), tl.col = 'black')
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.7)]), tl.col = 'black')
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values), cutoff = 0.3)]), tl.col = 'black')
findCorrelation(cor(numeric_values), cutoff = 0.9)
findCorrelation(cor(numeric_values), cutoff = 0.9)
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values),
cutoff = 0.9)]), tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
findCorrelation(cor(numeric_values), cutoff = 0.9)
corrplot(cor(numeric_values[,-findCorrelation(cor(numeric_values),
cutoff = 0.9)]), tl.col = 'black')
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
View(train_cor_filtered)
a <- findCorrelation(cor(numeric_values), cutoff = 0.9)
View(train_cor_filtered)
train_cor[,findCorrelation(cor(numeric_values), cutoff = 0.9)]
findCorrelation(cor(numeric_values), cutoff = 0.9)
View(train_cor)
View(train_cor_filtered)
setdiff(train_cor, train_cor_filtered)
setdiff(colnames(train_cor), colnames(train_cor_filtered))
corrplot(train_cor_filtered, tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.7)]
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
corrplot(train_cor_filtered, tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
library(ggplot2)
library(readr)
library(DataExplorer)
library(summarytools)
library(Amelia)
library(VIM)
library(dplyr)
library(forecast)
library(tidyr)
library(mice)
library(corrplot)
library(MASS)
library(earth)
library(RANN)
library(caret)
#load data
train <- read.csv("TrainingData.csv")
#review
glimpse(train)
#NA counts by column
#sapply(train, function(x) sum(is.na(x)))
VIM::aggr(train, numbers=T, sortVars=T, bars = FALSE, border= 'white',
cex.axis = .6,
ylab=c("Proportion of NAs", "Combinations"))
print(dfSummary(train), file = '~/train_summary.html')
summary(train)
ggplot(train, aes(x=reorder(Brand.Code, Brand.Code, function(x)-length(x)))) +
geom_bar() +  labs(x='Brand.Code')+
labs(title= 'Brand.Code Distribution')
DataExplorer::plot_histogram(train, nrow = 3L, ncol = 4L)
#add name to empty string
train$Brand.Code[train$Brand.Code == ""] <- "No Code"
#convert variable type to factor
train <- train %>%
dplyr::mutate(Brand.Code = factor(Brand.Code,
levels = c('A','B','C','D', 'No Code'),
ordered = FALSE))
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
corrplot(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)], tl.col = 'black')
corrplot(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)], tl.col = 'black')
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]
corrplot(cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)]), tl.col = 'black')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.9)])
corrplot(train_cor_filtered, tl.col = 'black')
corrplot.mixed(train_cor_filtered, tl.col = 'black', order = 'AOE')
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.7)])
corrplot.mixed(train_cor_filtered, tl.col = 'black', order = 'AOE')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
corrplot.mixed(train_cor_filtered, tl.col = 'black')
corrplot.mixed(train_cor_filtered, tl.col = 'black',tl.pos = 'lt', upper = "number")
corrplot.mixed(train_cor_filtered, tl.col = 'black',tl.pos = 'lt', upper = "number",lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.8)])
corrplot.mixed(train_cor_filtered, tl.col = 'black',
tl.pos = 'lt', upper = "number",lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
vals <- findCorrelation(cor(numeric_values), cutoff = 0.8)
train_cor_filtered <- cor(train_cor[,-vals])
corrplot.mixed(train_cor_filtered, tl.col = 'black',
tl.pos = 'lt', upper = "number",lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.8)])
corrplot.mixed(train_cor_filtered, tl.col = 'black',
tl.pos = 'lt', upper = "number",lower="circle")
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values), cutoff = 0.8)])
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(cor(numeric_values))])
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(train_cor,cutoff = 0.9)])
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
numeric_values <- train
numeric_values<- numeric_values %>%
select_if(is.numeric) %>%
na.omit()
train_cor <- cor(numeric_values)
train_cor_filtered <- cor(train_cor[,-findCorrelation(train_cor,cutoff = 0.9,exact = TRUE)])
corrplot(train_cor_filtered, tl.col = 'black')
setdiff(colnames(train_cor), colnames(train_cor_filtered))
